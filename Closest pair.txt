#include <iostream>
#include <cmath>
#include <cstdlib>
using namespace std;
struct Point{
    float x, y;
    Point(){
        x=y=0;
    }
    Point(float X,float Y){
        x=X;
        y=Y;
    }
    void Print(){
            cout<<"x = "<<x<<" y = "<<y<<endl;
        }
};
static Point point1,point2;


float dist(Point p1,Point p2){
    return sqrt(((p1.x-p2.x)*(p1.x-p2.x))+((p1.y-p2.y)*(p1.y-p2.y)));
}


int compareX_axis(const void* a, const void* b)
{
	const Point* X = (Point*) a;
	const Point* Y = (Point*) b;

	if (X->x > Y->x)
		return 1;
	else if (X->x < Y->x)
		return -1;

	return 0;
}

int compareY_axis(const void* a, const void* b)
{
	const Point* X = (Point*) a;
	const Point* Y = (Point*) b;

	if (X->y > Y->y)
		return 1;
	else if (X->y< Y->y)
		return -1;

	return 0;
}

float BruteForce(Point *arr,int n){
    float smallest=100000;
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            if(dist(arr[i],arr[j])<smallest){
                smallest=dist(arr[i],arr[j]);
                point1=arr[i];
                point2=arr[j];
            }
        }
    }
    return smallest;
}
float verticalClosestPoint(Point *arr,float smallestPoint,int n){
    float smallest=smallestPoint;
    qsort(arr,n,sizeof(Point),compareY_axis);
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n&&abs(arr[i].y-arr[j].y)<smallest;j++){
            if(dist(arr[i],arr[j])<smallest){
                smallest=dist(arr[i],arr[j]);
                point1=arr[i];
                point2=arr[j];
            }
        }
    }
    return smallest;
}

float closestPoint(Point *arr,int n){
    if(n<=3){
        return BruteForce(arr,n);
    }
    int midlle=n/2;
    float smallestLeft=closestPoint(arr,midlle);
    float smallestRight=closestPoint(arr+midlle,n-midlle);

    float smallestD=min(smallestLeft,smallestRight);
    Point verticalClosest[n];
    for(int i=0,j=0;i<n;i++){
        if(abs(arr[i].x-arr[midlle].x)<smallestD){
            verticalClosest[j++]=arr[i];
        }
    }
    smallestD=verticalClosestPoint(arr,smallestD,n);

    return smallestD;
}

int main()
{
    Point arr[]={{2,5},{6,4},{15,20},{10,30},{1,100},{3,45},{48,98}};
    qsort(arr,7,sizeof(Point),compareX_axis);
    cout<<closestPoint(arr,7)<<endl;
    point1.Print();
    point2.Print();
    return 0;
}
